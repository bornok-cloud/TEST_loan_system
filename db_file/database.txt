CREATE DATABASE loan_management;
USE loan_management;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL
);

CREATE TABLE loans (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    amount DECIMAL(10, 2) NOT NULL,
    interest_rate DECIMAL(5, 2) NOT NULL,
    term INT NOT NULL,
    start_date DATE NOT NULL,
    status ENUM('active', 'closed') DEFAULT 'active',
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    loan_id INT,
    payment_date DATE NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (loan_id) REFERENCES loans(id)
);

ALTER TABLE loans ADD COLUMN borrower_name VARCHAR(255) NOT NULL;

ALTER TABLE loans MODIFY COLUMN status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending';

SELECT id, user_id, amount, status FROM loans;

UPDATE loans SET status = 'pending' WHERE status NOT IN ('approved', 'rejected', 'pending');


-- Alter the 'usertype' column to ENUM('user', 'admin')
ALTER TABLE users
MODIFY COLUMN usertype ENUM('user', 'admin') DEFAULT 'user';






<_______UPDATED DATABASE________>





CREATE DATABASE loan_management;

USE loan_management;

CREATE TABLE `loan_applications` (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address TEXT NOT NULL,
    loan_amount DECIMAL(10, 2) NOT NULL,
    income DECIMAL(10, 2) NOT NULL,
    loan_duration INT NOT NULL, -- duration in months
    employment_status ENUM('employed', 'self-employed', 'unemployed', 'retired') NOT NULL,
    interest_rate DECIMAL(5, 2) NOT NULL,
    status ENUM('pending', 'approved', 'rejected') NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    loan_type VARCHAR(50) NOT NULL,
    min_loan_amount INT NOT NULL,
    max_loan_amount INT NOT NULL
);

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    usertype ENUM('user', 'admin') DEFAULT 'user'
);

CREATE TABLE admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    usertype ENUM('user', 'admin') DEFAULT 'admin'
);

DELIMITER $$

CREATE TRIGGER after_user_insert
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    IF NEW.usertype = 'admin' THEN
        INSERT INTO admins (id, username, password, email, usertype)
        VALUES (NEW.id, NEW.username, NEW.password, NEW.email, NEW.usertype);
    END IF;
END $$

DELIMITER ;









<______________________________________ LOAN DATABASE STRUCTURE ______________________________________>

unilolo769@gmail.com
app password: wxvx wgvl nctu esti, vufo vjxq ciwt crrc



CREATE DATABASE loan_system;

USE loan_system;

CREATE TABLE users (
    full_name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    verify_token VARCHAR(255) NOT NULL,
    is_verified TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE loan_applications (
    id INT AUTO_INCREMENT PRIMARY KEY,

    -- User Reference (No FK constraint)
    user_id INT NOT NULL,

    -- Step 1: Personal Details
    full_name VARCHAR(255) NOT NULL,
    contact_number VARCHAR(20) NOT NULL,
    dob DATE NOT NULL,
    gender ENUM('Male', 'Female') NOT NULL,

    -- Step 2: Address & ID
    address TEXT NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    valid_id_type VARCHAR(100) NOT NULL,
    id_number VARCHAR(50) NOT NULL,
    id_photo_path VARCHAR(255) NOT NULL,

    -- Step 3: Loan Purpose
    loan_amount DECIMAL(10,2) NOT NULL,
    loan_purpose VARCHAR(255) NOT NULL,

    -- Application Status
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',

    -- Timestamp
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE loan_applications ADD COLUMN term_of_loan INT NOT NULL AFTER loan_purpose;
CREATE TABLE IF NOT EXISTS payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    reference_number VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    transaction_id VARCHAR(50) NOT NULL,
    payment_date DATETIME NOT NULL,
    FOREIGN KEY (reference_number) REFERENCES loan_applications(reference_number)
);




___________________________________________________________________________________________


-- Create loans table for approved loans only
CREATE TABLE loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    application_id INT NOT NULL,
    user_id INT NOT NULL,
    loan_amount DECIMAL(10,2) NOT NULL,
    interest_rate DECIMAL(5,2) NOT NULL,
    loan_term INT NOT NULL COMMENT 'In months',
    monthly_payment DECIMAL(10,2) NOT NULL,
    total_repayment DECIMAL(10,2) NOT NULL,
    remaining_amount DECIMAL(10,2) NOT NULL,
    approval_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    next_payment_date DATE NOT NULL,
    status ENUM('active', 'completed', 'defaulted') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (application_id) REFERENCES loan_applications(id)
);

-- Create payments table
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    loan_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method ENUM('uniqwallet', 'bank_transfer', 'debit_card') NOT NULL,
    transaction_id VARCHAR(50) NOT NULL,
    status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (loan_id) REFERENCES loans(loan_id)
);

-- Create trigger to move approved loans to loans table
DELIMITER //
CREATE TRIGGER after_loan_approval
AFTER UPDATE ON loan_applications
FOR EACH ROW
BEGIN
    -- Declare all variables first
    DECLARE monthly_payment DECIMAL(10,2);
    DECLARE total_repayment DECIMAL(10,2);
    DECLARE interest_rate DECIMAL(5,2) DEFAULT 3.00; -- Fixed 3% rate
    
    -- Then add your logic
    IF NEW.status = 'Approved' AND OLD.status != 'Approved' THEN
        -- Calculate monthly payment (simple interest)
        SET total_repayment = NEW.loan_amount * (1 + (interest_rate/100));
        SET monthly_payment = total_repayment / 12; -- Assuming 12 month term
        
        -- Insert into loans table
        INSERT INTO loans (
            application_id,
            user_id,
            loan_amount,
            interest_rate,
            loan_term,
            monthly_payment,
            total_repayment,
            remaining_amount,
            next_payment_date
        ) VALUES (
            NEW.id,
            NEW.user_id,
            NEW.loan_amount,
            interest_rate,
            12, -- Example: 12 month term
            monthly_payment,
            total_repayment,
            total_repayment, -- Initially remaining equals total
            DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH) -- First payment due in 1 month
        );
    END IF;
END//
DELIMITER ;

-- Create ewallet table for user balances
CREATE TABLE user_ewallets (
    wallet_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    balance DECIMAL(10,2) DEFAULT 0.00,
    pin_hash VARCHAR(255) NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY (user_id)
);


CREATE TABLE IF NOT EXISTS payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    reference_number VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    transaction_id VARCHAR(50) NOT NULL,
    payment_date DATETIME NOT NULL,
    FOREIGN KEY (reference_number) REFERENCES loan_applications(reference_number)
);